
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++)
        if (((a % m) * (x % m)) % m == 1)
            return x;
    return -1; 
}

void decryptAffineCipher(char *ciphertext, int a, int b) {
    int m = 26; 

    
    int aInverse = modInverse(a, m);

    if (aInverse == -1) {
        printf("Modular inverse does not exist. Unable to decrypt.\n");
        return;
    }

    printf("Decrypted Message: ");
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            char decryptedChar = ((aInverse * (ciphertext[i] - 'A' - b + m)) % m) + 'A';
            printf("%c", decryptedChar);
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            char decryptedChar = ((aInverse * (ciphertext[i] - 'a' - b + m)) % m) + 'a';
            printf("%c", decryptedChar);
        } else {
            
            printf("%c", ciphertext[i]);
        }
    }
    printf("\n");
}
void practice ()
{
	char ciphertext[] = "BUUUUBUBUBUBUBUBUBUBUBUBUBUBUBU"; // Example ciphertext
    int a = 5; 
    int b = 1; 

    printf("Ciphertext: %s\n", ciphertext);
    printf("Breaking the Affine Cipher...\n");

    decryptAffineCipher(ciphertext, a, b);
}
